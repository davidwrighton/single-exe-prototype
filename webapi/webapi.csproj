<Project>

  <PropertyGroup>
    <UseStaticHost Condition=" '$(UseStaticHost)' == '' ">true</UseStaticHost>
    <UsePublishFilterList Condition=" '$(UsePublishFilterList)' == '' ">true</UsePublishFilterList>
    <PublishTrimmed Condition=" '$(PublishTrimmed)' == '' ">false</PublishTrimmed>
    <PublishReadyToRun Condition=" '$(PublishReadyToRun)' == '' ">false</PublishReadyToRun>
    <TargetFramework>netcoreapp3.0</TargetFramework>
    <SelfContained>true</SelfContained>
    <CoreClrBinariesDir>$([System.IO.Path]::GetFullPath('$(MSBuildThisFileDirectory)coreclrbin/'))</CoreClrBinariesDir>
  </PropertyGroup>

  <PropertyGroup>
    <!-- output intermediate files into the publish directory as well
         for easy retrieval from aspnet benchmark infra -->
    <!-- be careful not to measure size numbers from this directory. -->
    <BaseIntermediateOutputPath>$(PublishDir)/obj</BaseIntermediateOutputPath>
    <BaseOutputPath>$(PublishDir)/bin</BaseOutputPath>
  </PropertyGroup>

  <Import Project="Sdk.props" Sdk="Microsoft.NET.Sdk.Web" />

  <!-- detect current platform RID -->
  <PropertyGroup Condition=" '$(SelfContained)' == 'true' ">
    <RuntimeIdentifier Condition="'$([MSBuild]::IsOSPlatform(Windows))' == 'true'">win-x64</RuntimeIdentifier>
    <RuntimeIdentifier Condition="'$([MSBuild]::IsOSPlatform(Linux))' == 'true'">linux-x64</RuntimeIdentifier>
    <RuntimeIdentifier Condition="'$([MSBuild]::IsOSPlatform(OSX))' == 'true'">osx-x64</RuntimeIdentifier>
  </PropertyGroup>

  <Target Name="PublishToIntermediateDirectory"
          BeforeTargets="PrepareForPublish"
          Condition=" '$(UseStaticHost)' == 'true' ">
    <PropertyGroup>
      <PublishDir>$(MultiFilePublishDir)</PublishDir>
    </PropertyGroup>
  </Target>

  <Target Name="UseStaticHost"
          AfterTargets="Publish"
          Condition=" '$(UseStaticHost)' == 'true' ">
    <MakeDir Directories="$(SingleFilePublishDir)" />
    <PropertyGroup>
      <BundleCommand>dotnet $(CoreClrBinariesDir)bundle.dll</BundleCommand>
      <BundleCommand>$(BundleCommand) --source $([System.IO.Path]::GetFullPath('$(MultiFilePublishDir)'))</BundleCommand>
      <BundleCommand>$(BundleCommand) --host $(AssemblyName)</BundleCommand>
    </PropertyGroup>
    <Message Importance="High" Text="$(BundleCommand)" />
    <!-- run from single-file publish directory to ensure output is placed there -->
    <Exec Command="$(BundleCommand)"
          WorkingDirectory="$(SingleFilePublishDir)" />
    <PropertyGroup>
      <SingleFileExecutable>$(SingleFilePublishDir)$(AssemblyName)</SingleFileExecutable>
    </PropertyGroup>
    <Exec Command="chmod 755 $(SingleFileExecutable)" />
    <Error Condition=" ! Exists('$(SingleFileExecutable)') " Text="single file not found at $(SingleFileExecutable)" />
    <Message Importance="High" Text="generated $(SingleFileExecutable)" />
  </Target>

  <ItemGroup>
    <TrimmerRootDescriptor Include="trim.xml" />
  </ItemGroup>

  <Target Name="EnableAggressiveTrimming"
          AfterTargets="_SetILLinkDefaults">
    <ItemGroup>
      <TrimmerRootAssembly Remove="@(TrimmerRootAssembly)" />
      <TrimmerRootAssembly Include="@(IntermediateAssembly)" />
      <_ManagedAssembliesToLink Update="@(_ManagedAssembliesToLink)">
        <action>link</action>
      </_ManagedAssembliesToLink>
    </ItemGroup>
  </Target>


  <Target Name="_DontUseBuildDependencyFile"
          AfterTargets="_ComputeUseBuildDependencyFile"
          Condition=" '$(UsePublishFilterList)' == 'true' ">
    <PropertyGroup>
      <!-- this allows us to remove files from deps.json, even if we didn't link. -->
      <_UseBuildDependencyFile>false</_UseBuildDependencyFile>
    </PropertyGroup>
  </Target>

  <Target Name="RemoveUnnecessaryFilesFromPublishOutput"
          AfterTargets="ComputeResolvedFilesToPublishList">
    <ItemGroup Condition=" '$(UsePublishFilterList)' == 'true' ">
      <PublishFilterList Include="%(ResolvedFileToPublish.Identity)" Condition="'%(FileName)' == 'libmscordaccore'" />
      <PublishFilterList Include="%(ResolvedFileToPublish.Identity)" Condition="'%(FileName)' == 'libmscordbi'" />
      <PublishFilterList Include="%(ResolvedFileToPublish.Identity)" Condition="'%(FileName)' == 'libdbgshim'" />
      <PublishFilterList Include="%(ResolvedFileToPublish.Identity)" Condition="'%(FileName)' == 'libcoreclrtraceptprovider'" />
      <PublishFilterList Include="%(ResolvedFileToPublish.Identity)" Condition="'%(FileName)' == 'SOS_README'" />

      <PublishFilterList Include="%(ResolvedFileToPublish.Identity)" Condition="'%(Extension)' == '.a'" />
      <PublishFilterList Include="%(ResolvedFileToPublish.Identity)" Condition="'%(Extension)' == '.pdb'" />

      <PublishFilterList Include="%(ResolvedFileToPublish.Identity)" Condition="'%(FileName)%(Extension)' == 'appsettings.Development.json'" />
      <PublishFilterList Include="%(ResolvedFileToPublish.Identity)" Condition="'%(FileName)%(Extension)' == 'nuget.config'" />

      <PublishFilterList Include="%(ResolvedFileToPublish.Identity)" Condition="'%(FileName)' == 'System.IO.Compression.Native'" />
      <PublishFilterList Include="%(ResolvedFileToPublish.Identity)" Condition="'%(FileName)' == 'System.Security.Cryptography.Native.OpenSsl'" />
      <PublishFilterList Include="%(ResolvedFileToPublish.Identity)" Condition="'%(FileName)' == 'System.Net.Security.Native'" />
      <PublishFilterList Include="%(ResolvedFileToPublish.Identity)" Condition="'%(FileName)' == 'System.Net.Http.Native'" />


      <PublishFilterList Include="%(ResolvedFileToPublish.Identity)" Condition="'%(FileName)' == 'System.Private.Xml'" />
      <PublishFilterList Include="%(ResolvedFileToPublish.Identity)" Condition="'%(FileName)' == 'System.Private.Xml.Linq'" />
      <PublishFilterList Include="%(ResolvedFileToPublish.Identity)" Condition="'%(FileName)' == 'System.Data.Common'" />
      <PublishFilterList Include="%(ResolvedFileToPublish.Identity)" Condition="'%(FileName)' == 'Microsoft.CSharp'" />

      <PublishFilterList Include="%(ResolvedFileToPublish.Identity)" Condition="'%(FileName)' == 'System.IO.Compression'" />
      <PublishFilterList Include="%(ResolvedFileToPublish.Identity)" Condition="'%(FileName)' == 'System.Private.DataContractSerialization'" />
      <PublishFilterList Include="%(ResolvedFileToPublish.Identity)" Condition="'%(FileName)' == 'System.Reflection.Metadata'" />
      <PublishFilterList Include="%(ResolvedFileToPublish.Identity)" Condition="'%(FileName)' == 'System.Text.RegularExpressions'" />
    </ItemGroup>

    <Message Importance="High" Text="not publishing: %(PublishFilterList.Identity)" />

    <ItemGroup Condition=" '$(UseStaticHost)' == 'true' ">
      <PublishFilterList Include="%(ResolvedFileToPublish.Identity)" Condition="'%(FileName)' == 'libcoreclr'" />
      <PublishFilterList Include="%(ResolvedFileToPublish.Identity)" Condition="'%(FileName)' == 'libclrjit'" />
      <PublishFilterList Include="%(ResolvedFileToPublish.Identity)" Condition="'%(FileName)' == 'libhostpolicy'" />
      <PublishFilterList Include="%(ResolvedFileToPublish.Identity)" Condition="'%(FileName)' == 'libhostfxr'" />
      <PublishFilterList Include="%(ResolvedFileToPublish.Identity)" Condition="'%(FileName)' == 'System.Native'" />

      <!-- These used to be filtered out. Do they need to be in the bundle? -->
      <PublishFilterList Include="%(ResolvedFileToPublish.Identity)" Condition="'%(FileName)' == 'System.IO.Compression.Native'" />
      <PublishFilterList Include="%(ResolvedFileToPublish.Identity)" Condition="'%(FileName)' == 'System.Net.Security.Native'" />
      <PublishFilterList Include="%(ResolvedFileToPublish.Identity)" Condition="'%(FileName)' == 'System.Security.Cryptography.Native.OpenSsl'" />

      <!-- apphost -->
      <PublishFilterList Include="%(ResolvedFileToPublish.Identity)" Condition="'%(FileName)%(Extension)' == '$(AssemblyName)'" />
      <!-- corelib -->
      <PublishFilterList Include="%(ResolvedFileToPublish.Identity)" Condition="'%(FileName)' == 'System.Private.CoreLib'" />

      <StaticHostLibs Include="$(CoreClrBinariesDir)corebundle">
        <RelativePath>$(AssemblyName)</RelativePath>
      </StaticHostLibs>
      <StaticHostLibs Include="$(CoreClrBinariesDir)System.Private.CoreLib.dll">
        <RelativePath>System.Private.CoreLib.dll</RelativePath>
      </StaticHostLibs>
    </ItemGroup>

    <ItemGroup>
      <ResolvedFileToPublish Remove="@(PublishFilterList)" />
      <ResolvedFileToPublish Include="@(StaticHostLibs)" Condition=" '$(UseStaticHost)' == 'true' " />

      <ResolvedCompileFileDefinitions Remove="@(PublishFilterList)" />
      <NativeCopyLocalItems Remove="@(PublishFilterList)" />
      <ResourceCopyLocalItems Remove="@(PublishFilterList)" />
      <RuntimeCopyLocalItems Remove="@(PublishFilterList)" />
      <RuntimeTargetsCopyLocalItems Remove="@(PublishFilterList)" />
      <RuntimePackAsset Remove="@(PublishFilterList)" />
    </ItemGroup>
  </Target>


  <Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk.Web" />

  <!-- set after the SDK targets define IntermediateOutputPath and PublishDir -->
  <PropertyGroup Condition=" '$(UseStaticHost)' == 'true' ">
    <!-- directory used by the aspnet benchmarking infra -->
    <SingleFilePublishDir>$([MSBuild]::EnsureTrailingSlash('$(PublishDir)'))</SingleFilePublishDir>
    <!-- directory used by the Publish target. we create the bundle after publishing. -->
    <MultiFilePublishDir>$(PublishDir)/multifile-publish</MultiFilePublishDir>
  </PropertyGroup>


  <!-- These targets will use the local crossgen, which doesn't take /JITPath -->
  <Target Name="UseLocalCrossgen"
          AfterTargets="_PrepareForReadyToRunCompilation">
    <ItemGroup>
      <_CrossgenTool Remove="@(_CrossgenTool)" />
      <_CrossgenTool Include="$(CoreClrBinariesDir)crossgen" />
    </ItemGroup>
  </Target>

  <Target Name="_CreateR2RImages">
    <!-- Work around non-assemblies in the input that are normally filtered out by the ReadyToRun task -->
    <ItemGroup>
      <_ReadyToRunImplementationAssemblies Remove="@(_ReadyToRunImplementationAssemblies)" Condition=" '%(Extension)' != '.dll' " />
    </ItemGroup>
    <!-- Necessary when sending to perflab - the permissions are not preserved when zipping/unzipping. -->
    <Exec Command="chmod +x @(_CrossgenTool)" />
    <PropertyGroup>
      <CrossgenCommand>@(_CrossgenTool) /nologo /MissingDependenciesOK</CrossgenCommand>
      <!-- crossgen fails if System.Private.CoreLib isn't a fully-qualified path -->
      <CrossgenCommand>$(CrossgenCommand) /r @(_ReadyToRunImplementationAssemblies->'%(FullPath)', ' /r ')</CrossgenCommand>
    </PropertyGroup>
    <ItemGroup>
      <CrossgenCommands Include="$(CrossgenCommand) /out %(_ReadyToRunCompileList.OutputR2RImage) %(_ReadyToRunCompileList.Identity)" />
    </ItemGroup>
    <Exec Command="%(CrossgenCommands.Identity)" />
  </Target>

</Project>
